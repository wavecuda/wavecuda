% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/rfunctions.R
\name{CPUTransform}
\alias{CPUTransform}
\title{CPUTransform}
\usage{
CPUTransform(xin, direction, nlevels, transform.type, filter)
}
\arguments{
\item{xin}{Vector input}

\item{direction}{"FWD" or "BWD"}

\item{nlevels}{Number of levels of transform; 0 means full transform}

\item{transform.type}{"DWT" or "MODWT"}

\item{filter}{e.g. "Haar"}
}
\value{
Returns a WST object containing the transform and details.
}
\description{
Wavelet transform using the CPU.
The input vector can be in the time domain or wavelet domain.
Supports DWT and (time-ordered) MODWT.
Supports Haar, D4, C6 and LA8 filters.
Allows the user to specify number of levels of transform required. Note that the maximum number of levels implemented is \eqn{\log_2{n} - b+1} where \eqn{n} is the length of the input vector and \eqn{b = ceiling (\log_2{L})} where \eqn{L} is the filter length. This means that we only allow transformations up to the level where the filter does not wrap around the coefficients more than once: with the Haar filter we do the full dyadic transform, whereas with the LA8 filter we stop after filtering 8 coefficients.
}
\details{
The DWT is transformed in-place after copying the input vector, whereas the MODWT requires extra memory allocation. The structure of the transformed DWT vector is the standard interleaved form. The structure of the transformed MODWT vector is \eqn{n} scaling coefficients then detail coefficients, concatenated sequentially for each layer. The best way to access the coefficients for each level is via \code{\link{WST.to.DT}}.
}
\seealso{
\code{\link{GPUTransform}}, \code{\link{CPUThreshold}}, \code{\link{CPUSmooth}}, \code{\link{GPUSmooth}}, \code{\link{WST.to.DT}}
}
